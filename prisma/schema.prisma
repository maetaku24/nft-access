// schema の変更を migration を生成せずにDBへ反映
// npx prisma db push
// prisma client の生成
// npx prisma generate
// マスタデータの流し込み
// npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Profileテーブル
model Profile {
  id             Int      @id @default(autoincrement())
  supabaseUserId String      @unique
  name           String?
  email          String
  walletAddress  String?
  iconKey        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  events         Event[]
}

// Eventテーブル
model Event {
  id             Int      @id @default(autoincrement())
  profileId      Int
  eventName      String
  length         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  eventNFTs      EventNFT[]
  eventSchedules EventSchedule[]
  reservation    Reservation[]
}

// EventとNFTの中間テーブル
model EventNFT {
  id         Int      @id @default(autoincrement())
  eventId    Int
  nftId      Int
  createdAt  DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  nft        Nft      @relation(fields: [nftId], references: [id], onDelete: Cascade)
}

// NFTテーブル
model Nft {
  id              Int      @id @default(autoincrement())
  collectionName  String
  standard        Standard
  network         Network
  contractAddress String
  tokenId         Int?
  minBalance      Int
  maxBalance      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  eventNFTs       EventNFT[]
}

// NFT規格
enum Standard {
  ERC721
  ERC1155
}

// NFTネットワーク
enum Network {
  ETHEREUM
  POLYGON
}

// EventとScheduleの中間テーブル
model EventSchedule {
  id         Int      @id @default(autoincrement())
  eventId    Int
  scheduleId Int
  createdAt  DateTime @default(now())
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

// Scheduleテーブル
model Schedule {
  id              Int      @id @default(autoincrement())
  weekday         String
  date            DateTime?
  startTime       String
  endTime         String
  maxParticipants Int?
  isClosed        Boolean?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  eventSchedules  EventSchedule[]
}

// Reservationテーブル
model Reservation {
  id              Int      @id @default(autoincrement())
  eventId         Int
  name            String
  email           String
  participants    Int
  walletAddress   String
  reservationDate DateTime
  startTime       String
  endTime         String
  status          Status
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  events          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

// 更新状態
enum Status {
  COMPLETED
  UPDATED
  CANCELLED
}